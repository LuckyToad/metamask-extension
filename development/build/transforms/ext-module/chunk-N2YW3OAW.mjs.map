{"version":3,"sources":["../src/transforms/utils.ts"],"sourcesContent":["import type { ESLint } from 'eslint';\n\n// Four spaces\nconst TAB = '    ';\n\n/**\n * Lints a transformed file by invoking ESLint programmatically on the string\n * file contents. The path to the file must be specified so that the repository\n * ESLint config can be applied properly.\n *\n * **ATTN:** See the `eslintInstance` parameter documentation for important usage\n * information.\n *\n * An error is thrown if linting produced any errors, or if the file is ignored\n * by ESLint. Files linted by this function must not be ignored by ESLint.\n *\n * @param eslintInstance - The ESLint instance to use for linting. This instance\n * needs to be initialized with the options `{ baseConfig, useEslintrc: false}`,\n * where `baseConfig` is the desired ESLint configuration for linting. If using\n * your project's regular `.eslintrc` file, you may need to modify certain rules\n * for linting to pass after code fences are removed.\n * @param content - The file content.\n * @param filePath - The path to the file.\n * @returns Returns `undefined` or throws an error if linting produced\n * any errors, or if the linted file is ignored.\n */\nexport async function lintTransformedFile(\n  eslintInstance: ESLint,\n  content: string,\n  filePath: string,\n): Promise<void> {\n  const lintResult = (\n    await eslintInstance.lintText(content, { filePath, warnIgnored: false })\n  )[0];\n\n  // This indicates that the file is ignored, which should never be the case for\n  // a transformed file.\n  if (lintResult === undefined) {\n    throw new Error(\n      `MetaMask build: Transformed file \"${filePath}\" appears to be ignored by ESLint.`,\n    );\n  }\n\n  // This is the success case\n  if (lintResult.errorCount === 0) {\n    return;\n  }\n\n  // Errors are stored in the messages array, and their \"severity\" is 2\n  const errorsString = lintResult.messages\n    .filter(({ severity }) => severity === 2)\n    .reduce((allErrors, { message, ruleId }) => {\n      return allErrors.concat(\n        `${TAB}${ruleId ?? '<Unknown rule>'}\\n${TAB}${message}\\n\\n`,\n      );\n    }, '');\n\n  throw new Error(\n    `MetaMask build: Lint errors encountered for transformed file \"${filePath}\":\\n\\n${errorsString}`,\n  );\n}\n"],"mappings":";AAGA,IAAM,MAAM;AAuBZ,eAAsB,oBACpB,gBACA,SACA,UACe;AACf,QAAM,cACJ,MAAM,eAAe,SAAS,SAAS,EAAE,UAAU,aAAa,MAAM,CAAC,GACvE,CAAC;AAIH,MAAI,eAAe,QAAW;AAC5B,UAAM,IAAI;AAAA,MACR,qCAAqC,QAAQ;AAAA,IAC/C;AAAA,EACF;AAGA,MAAI,WAAW,eAAe,GAAG;AAC/B;AAAA,EACF;AAGA,QAAM,eAAe,WAAW,SAC7B,OAAO,CAAC,EAAE,SAAS,MAAM,aAAa,CAAC,EACvC,OAAO,CAAC,WAAW,EAAE,SAAS,OAAO,MAAM;AAC1C,WAAO,UAAU;AAAA,MACf,GAAG,GAAG,GAAG,UAAU,gBAAgB;AAAA,EAAK,GAAG,GAAG,OAAO;AAAA;AAAA;AAAA,IACvD;AAAA,EACF,GAAG,EAAE;AAEP,QAAM,IAAI;AAAA,IACR,iEAAiE,QAAQ;AAAA;AAAA,EAAS,YAAY;AAAA,EAChG;AACF;","names":[]}